// Minimal pre-built ELF binary for testing
// This is a simple "Hello from ELF!" program compiled for x86_64

#ifndef HELLO_BINARY_H
#define HELLO_BINARY_H

// This would be the binary data from a compiled hello.elf
// For now, we'll create a placeholder that the ELF loader can validate
// In a real system, this would be generated by: xxd -i hello.elf > hello_binary.h

static const unsigned char hello_elf[] = {
    // ELF header (64 bytes)
    0x7f, 0x45, 0x4c, 0x46,  // Magic: 0x7f, 'E', 'L', 'F'
    0x02,                     // 64-bit
    0x01,                     // Little endian  
    0x01,                     // Current version
    0x00,                     // System V ABI
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Padding
    0x02, 0x00,               // Executable file
    0x3e, 0x00,               // x86-64
    0x01, 0x00, 0x00, 0x00,   // Version
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // Entry point: 0x100000
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Program header offset
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Section header offset
    0x00, 0x00, 0x00, 0x00,   // Flags
    0x40, 0x00,               // ELF header size
    0x38, 0x00,               // Program header size
    0x01, 0x00,               // Number of program headers
    0x40, 0x00,               // Section header size  
    0x00, 0x00,               // Number of section headers
    0x00, 0x00,               // Section header string table index
    
    // Program header (56 bytes)
    0x01, 0x00, 0x00, 0x00,   // PT_LOAD
    0x05, 0x00, 0x00, 0x00,   // PF_R | PF_X
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // File offset
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // Virtual address: 0x100000
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // Physical address
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // File size: 32 bytes
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Memory size: 32 bytes
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Alignment
    
    // Simple program that calls sys_write and sys_exit (32 bytes of code)
    // This is placeholder - in real system would be actual x86_64 machine code
    0x48, 0xc7, 0xc0, 0x02, 0x00, 0x00, 0x00, // mov rax, 2 (sys_write)
    0x48, 0xc7, 0xc7, 0x01, 0x00, 0x00, 0x00, // mov rdi, 1 (stdout)
    0x48, 0xc7, 0xc6, 0x00, 0x20, 0x10, 0x00, // mov rsi, msg_addr (placeholder)
    0x48, 0xc7, 0xc2, 0x10, 0x00, 0x00, 0x00, // mov rdx, 16 (length)
    0xcd, 0x80,                               // int 0x80
    0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00, // mov rax, 1 (sys_exit)
    0x48, 0xc7, 0xc7, 0x00, 0x00, 0x00, 0x00, // mov rdi, 0 (exit code)
    0xcd, 0x80,                               // int 0x80
    0x90, 0x90                                // nop padding
};

static const unsigned int hello_elf_len = sizeof(hello_elf);

#endif // HELLO_BINARY_H